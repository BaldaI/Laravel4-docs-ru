== Кэш ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=23.07.2013}}
{{Meta оригинал=doc4:cache}}

{{TOC}}

== Настройка ==
Laravel предоставляет унифицированное API для различных систем кэширования. Настройки кэша содержатся в файле %%(t)app/config/cache.php%%. Здесь вы можете указать драйвер, используемый по умолчанию внутри вашего приложения. Laravel изначально поддерживает многие популярные системы, такие как ((http://memcached.org/ Memcached)) и ((http://redis.io/ Redis)).

Этот файл также содержит множество других настроек, которые в нём же документированы, поэтому обязательно ознакомьтесь с ними. По умолчанию, Laravel настроен для использования драйвера **file**, который хранит упакованные объекты кэша в файловой системе. Для больших приложений рекомендуется использование систем кэширования в памяти - таких как Memcached или ((phpdoc::book.apc APC)).

== Использование кэша ==
**Запись нового элемента в кэше:**
%%
  Cache::put('key', 'value', $minutes);
%%

**Запись элемента, если он не существует:**
%%
  Cache::add('key', 'value', $minutes);
%%

**Проверка существования элемента в кэше:**
%%
  if (Cache::has('key')) {
    //
  }
%%

**Чтение элемента из кэша:**
%%
  $value = Cache::get('key');
%%

**Чтение элемента или значения по умолчанию:**
%%
  $value = Cache::get('key', 'default');

  $value = Cache::get('key', function () { return 'default'; });
%%

**Запись элемента на постоянное хранение:**
%%
  Cache::forever('key', 'value');
%%

Иногда вам может быть нужно получить элемент из кэша или сохранить его там, если он не существует. Вы можете сделать это методом %%Cache::remember()%%:
%%
  $value = Cache::remember('users', $minutes, function () {
    return DB::table('users')->get();
  });
%%

Вы также можете совместить %%remember()%% и %%forever()%%:
%%
  $value = Cache::rememberForever('users', function () {
    return DB::table('users')->get();
  });
%%

Обратите внимание, что все кэшируемые данные упаковываются (сериализуются), поэтому вы можете хранить любые их типы.

**Удаление элемента из кэша:**
%%
  Cache::forget('key');
%%

== Увеличение и уменьшение значений ==
Все драйверы, кроме **file** и **database**, поддерживают операции //инкремента// и //декремента//.

**Увеличение числового значения:**
%%
  Cache::increment('key');

  // $amount - число; 'key' += $amount
  Cache::increment('key', $amount);
%%

**Уменьшение числового значения:***
%%
  Cache::decrement('key');

  // $amount - число; 'key' -= $amount
  Cache::decrement('key', $amount);
%%

== Группы элементов ==
.(alert)
**Внимание:** группы не поддерживаются драйверами **file** и **database**.

Вы можете объединять элементы кэша в группы, а затем сбрасывать всю группу целиком. Для доступа к секции используйте метод %%section()%%.

**Обращение к группе элементов кэша:**
%%
  Cache::section('people')->put('John', $john);

  Cache::section('people')->put('Anne', $anne);
%%

Вы можете использовать обычные операции над элементами группы, такие как чтение, запись, %%increment()%% и %%decrement()%%.

**Чтение элемента группы:??
%%
  $anne = Cache::section('people')->get('Anne');
%%

Вы также можете удалить всю группу:
%%
  Cache::section('people')->flush();
%%

== Кэширование в базе данных ==
Перед использовании драйвера **database** вам нужно создать таблицу для хранения элементов кэша. Ниже приведён пример её ((schema структуры Schema)):
%%
  Schema::create('cache', function ($table) {
    $table->string('key')->unique();
    $table->text('value');
    $table->integer('expiration');
  });
%%