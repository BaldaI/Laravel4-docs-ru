== Шаблоны ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=13.09.2013}}
{{Meta оригинал=doc4:templates}}

{{TOC}}

== ((#контроллеров)) Шаблоны контроллеров ==
Один из способов использования шаблонов в Laravel - в виде шаблонов контроллеров. Если в классе ((controllers контроллера)) определить свойство %%layout%%, то указанный шаблон будет создан автоматически и будет использоваться при генерации ответа клиенту.

**Определение шаблона контроллера:**
%%
  class UserController extends BaseController {

    /**
     * Шаблон, который должен использоваться при ответе.
     */
    protected $layout = 'layouts.master';

    /**
     * Отображает профиль пользователя.
     */
    public function showProfile()
    {
      $this->layout->content = View::make('user.profile');
    }

  }
%%

== ((#blade)) Шаблоны Blade ==
**Blade** - простой, но мощный шаблонизатор, входящий в состав Laravel. В отличии от шаблонов ((controllers контроллеров)), Blade основан на концепции //наследования шаблонов// и //секциях//. Все шаблоны Blade должны иметь расширение %%(t) .blade.php%%.

**Создание шаблона Blade:**
%%(html)
  <!-- Расположен в app/views/layouts/master.blade.php -->

  <html>
    <body>
      @section('sidebar')
        Это - главная боковая панель.
      @show

      <div class="container">
        @yield('content')
      </div>
    </body>
  </html>
%%

**Использование шаблона Blade:**
%%(html)
  @extends('layouts.master')

  @section('sidebar')
    @parent

    <p>Этот элемент будет добавлен к главной боковой панели.</p>
  @stop

  @section('content')
    <p>Это - содержимое страницы.</p>
  @stop
%%

Заметьте, что шаблоны, которые расширяют другой Blade-шаблон с помощью **@extend**, просто перекрывают секции последнего. Старое (перекрытое) содержимое может быть выведено директивой **@parent**.

Иногда - например, когда вы не уверены, что секция была определена - вам может понадобиться указать значение по умолчанию для директивы **@yield**. Вы можете передать его вторым аргументом:
%%
  @yield('section', 'Default Content');
%%

== Другие директивы Blade ==
%%
  Привет, {{ $name }}.

  Текущее время эпохи UNIX: {{ time() }}.
%%

Конечно, весь пользовательский ввод должен быть экранирован или очищен. Для экранирования используйте тройные скобки:
%%
  Hello, {{{ $name }}}.
%%

.(alert)
**Внимание:** будьте очень осторожны и экранируйте переменные, которые содержат ввод от пользователя. Всегда используйте тройные скобки, чтобы преобразовать HTML-сущности в переменной в текст.

.(tl_note)
Как показывает практика, вместо экранирования только пользовательских переменных безопаснее экранировать весь вывод, делая исключения только в редких случаях. Некоторые альтернативные шаблонизаторы, такие как ((тема:121 HTMLki)), делают это автоматически - //прим. пер.//

=== If ==
%%(html)
  @if (count($records) === 1)
    <p>Здесь есть одна запись!</p>
  @elseif (count($records) > 1)
    <p>Здесь есть много записей!</p>
  @else
    <p>Здесь нет записей!</p>
  @endif

  @unless (Auth::check())
    <p>Вы не вошли в систему.</p>
  @endunless
%%

=== Циклы ==
%%(html)
  @for ($i = 0; $i < 10; $i++)
    <p>Текущее значение: {{ $i }}</p>
  @endfor

  @foreach ($users as $user)
    <p>Это пользователь {{ $user->id }}</p>
  @endforeach

  @while (true)
    <p>Это будет длиться вечно.</p>
  @endwhile
%%

=== Подшаблоны ==
%%
  @include('view.name')
%%

Вы также можете передать массив переменных во включаемый шаблон:
%%
  @include('view.name', array('some'=>'data'))
%%

=== Перезапись секций ==
По умолчанию, содержимое новой секции добавляется в конец содержимого старой (перекрытой) секции. Для полной перезаписи можно использовать директиву **@overwrite**.

%%(html)
  @extends('list.item.container')

  @section('list.item.content')
    <p>Это - элемент типа {{ $item->type }}</p>
  @overwrite
%%

=== Языковые строки ==
%%
  @lang('language.line')

  @choice('language.line', 1);
%%

=== Комментарии ==
%%(t)
  {{-- Этот комментарий не будет включён в сгенерированный HTML --}}
%%