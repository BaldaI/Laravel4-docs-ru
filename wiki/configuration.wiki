== Настройки ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=14.07.2013}}
{{Meta оригинал=doc4:configuration}}

{{TOC}}

== Вступление ==
Все файлы настроек Laravel хранятся в папке %%(t)app/config%%. Каждая настройка задокументирована, поэтому не стесняйтесь изучить эти файлы и познакомиться с возможностями конфигурирования.

Иногда вам нужно прочитать настройку во время работы приложения. Это можно сделать, используя класс %%Config%%.

**Чтение значения настройки:**
%%(php)
  Config::get('app.timezone');
%%

Вы можете указать значение по умолчанию, которое будет возвращено, если настройка не существует:
%%(php)
  $timezone = Config::get('app.timezone', 'UTC');
%%

Заметьте, что синтаксис с точкой может использоваться для доступа к разным файлам настроек.

**Изменение значения во время выполнения:**
%%(php)
  Config::set('database.default', 'sqlite');
%%

Значения, установленные таким образом, сохраняются только для текущего запроса и не влияют на более поздние запросы.

== ((#среда)) Настройки среды ==
Часто необходимо иметь разные значения для разных настроек в зависимости от среды, в которой выполняется приложение. Например, вы можете захотеть использовать разные драйвера кэша на локальном и производственном серверах. Это легко достигается использованием настроек, зависящих от среды.

Просто создайте внутри %%(t)config%% папку с именем вашей среды, таким как %%(t)local%%. Затем создайте файлы настроек и укажите в них значения для этой среды, которыми вы перекроете изначальные настройки. Например, вы можете перекрыть драйвер кэша для локальной системы, создав файл %%(t)cache.php%% внутри %%(t)app/config/local%% с таким содержимым:
%%(php)
  <?php

  return array(
    'driver' => 'file',
  );
%%

.(alert)
Не используйте имя **testing** для названия среды - оно зарезервировано для ((testing юнит-тестов)).

Заметитьте, что вам не нужно указывать //каждую// настройку, которая есть в конфигурационном файле по умолчанию (%%(t)app/config/cache.php%%). Настройки среды будут наложены на эти базовые файлы.

Теперь нам нужно сообщить Laravel, в какой среде он работает. По умолчанию это всегда **production**. Вы можете настроить другие среды в файле %%(t)bootstrap/start.php%%, который находится в корне установки Laravel. В этом файле есть вызов %%(php) $app->detectEnvironment()%% - массив, который ему передаётся, используется для определения текущей среды. Вы можете добавить в него другие среды и имена компьютеров по необходимости.

%%(php)
  <?php

  $env = $app->detectEnvironment(array(
    'local' => array('your-machine-name'),
  ));
%%

Вы можете передать в метод функцию-замыкание (//closure//), что позволит вам делать собственные проверки:
%%(php)
  $env = $app->detectEnvironment(function () {
    return $_SERVER['MY_LARAVEL_ENV'];
  });
%%

**Получение имени текущей среды:**
%%(php)
  $environment = App::environment();
%%

== Режим обслуживания ==
Когда ваше приложение находится в режиме обслуживания (//maintenance mode//), специальный ((templates шаблон)) будет отображаться вместо всех ваших ((quick#маршрут+))ов. Это позволяет "отключать" приложение, в момент обновления. Вызов %%(php) App::down()%% уже содержится в файле %%(t)app/start/global.php%%. Возвращённое им значение будет отправлено пользователю, когда приложение находится в режиме обслуживания.

Для включения этого режима просто выполните команду **up** ((artisan Artisan)):
%%(sh)
  php artisan down
%%

Чтобы выйти из режима обслуживания выполните команду **down**:
%%(sh)
  php artisan up
%%

Для отображения собственного шаблона в режиме обслуживания вы можете добавить в %%(t)app/start/global.php%% подобный код:
%%(php)
  App::down(function () {
    return Response::view('maintenance', array(), 503);
  });
%%