== Страничный вывод ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=13.09.2013}}
{{Meta оригинал=doc4:database}}

{{TOC}}

== Настройка ==
Laravel делает процесс соединенеия с БД и выполнение запросов очень простым. Настройки работы с БД хранятся в файле %%(t) app/config/database.php%%. Здесь вы можете указать все используемые вами соединения к БД, а также задать то, какое из них будет использоваться по умолчанию. Примеры настройки всех возможных видов подключений находятся в этом же файле.

На данный момент Laravel поддерживает 4 СУБД: MySQL, PostgresSQL, SQLite и SQL Server.

== Выполнение запросов ==
Как только вы настроили соединение с базой данных вы можете выполнять запросы, используя класс %%DB%%.

**Выполнение запроса %%(t)SELECT%%:**
%%
  $results = DB::select('select * from users where id = ?', array(1));
%%

Метод %%select()%% всегда возвращает массив.

**Выполнение запроса %%(t)INSERT%%:**
%%
  DB::insert('insert into users (id, name) values (?, ?)', array(1, 'Dayle'));
%%

**Выполнение запроса %%(t)UPDATE%%:**
%%
  DB::update('update users set votes = 100 where name = ?', array('John'));
%%

**Выполнение запроса %%(t)DELETE%%:**
%%
  DB::delete('delete from users');
%%

.(alert)
**Подсказка:** методы %%update()%% и %%delete()%% возвращают число затронутых строк.

**Выполнение запроса другого типа:**
%%
  DB::statement('drop table users');
%%

Вы можете добавить собственный обработчик, вызываемый при выполнении очередного запроса, с помощью метода %%DB::listen()%%.

**Реагирование на выполнение запросов:**
%%
  DB::listen(function ($sql, $bindings, $time) {
    //
  });
%%

== Транзакции ==
Вы можете использовать метод %%DB::transaction()%% для выполнения запросов внутри одной транзации:
%%
  DB::transaction(function () {
    DB::table('users')->update(array('votes' => 1));

    DB::table('posts')->delete();
  });
%%

.(tl_note)
**Транзакция** - особое состояние БД, в котором выполняемые запросы либо все вместе успешно завершаются, либо (в случае ошибки) все их изменения откатываются. Это позволяет поддерживать целостность внутренней структуры данных. К примеру, если вы вставляете запись о заказе, а затем в отдельную таблицу добавляете товары, то при неуспешном выполнении скрипта (в том числе падения вёб-сервера, ошибки в запросе и пр.) СУБД автоматически удалит запись о заказе и все товары, которые вы успели добавить - //прим. пер.//

== Другие соединения ==
При использовании нескольких подключений к БД вы можете получить к ним достум через метод %%DB::connection()%%:
%%
  $users = DB::connection('foo')->select(...);
%%

Вы также можете получить низкоуровневый объект ((phpdoc:book.pdo PDO)) для этого подключения:
%%
  $pdo = DB::connection()->getPdo();
%%

Иногда вам может понадобиться переподключиться и вы можете сделать это так:
%%
  DB::reconnect('foo');
%%

== Журнал запросов ==
По умолчанию Laravel записывает все SQL-запросы, выполненные в рамках текущего запроса страницы. Однако в некоторых случаях - например, при вставке большого набора записей - это может быть слишком ресурсозатратно. Для отключения журнала вы можете использовать метод %%disableQueryLog()%%:
%%
  DB::connection()->disableQueryLog();
%%