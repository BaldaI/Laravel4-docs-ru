== Миграции и начальные данные ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=16.09.2013}}
{{Meta оригинал=doc4:migrations}}

{{TOC}}

== Введение ==
Миграции - что-то вроде системы контроля версий для вашей базы данных. Они позволяют команде изменять её структуру, в то же время оставаясь в курсе изменений других участников. Миграции обычно идут рука об руку с ((schema построителем структур)) для более простого обращения с архитектурой вашего приложения.

== Создание миграций ==
Для создания новой миграции вы можете использовать команду **migrate:make** командного интерфейса ((artisan Artisan)).

**Создание миграции:**
%%(sh)
  php artisan migrate:make create_users_table
%%

Миграция будет помещена в папку %%(t)app/database/migrations%% и будет содержать текущее время, которое позволяет библиотеке определять порядок применения миграций.

При создании миграции вы можете также передать параметр %%(t)--path%%. Путь должен быть относительным к папке вашей установки Laravel.
%%(sh)
  php artisan migrate:make foo --path=app/migrations
%%

Можно также использовать параметры %%(t)--table%% и %%(t)--create%% для указания имени таблицы и того факта,что миграция будет создавать новую таблицу (!!(tl_note)а не изменять существующую - //прим. пер.//!!).
%%(sh)
  php artisan migrate:make create_users_table --table=users --create
%%

== Применение миграций ==
**Накатывание всех неприменённых миграций:**
%%(sh)
  php artisan migrate
%%

**Накатывание новых миграций в указанной папке:**
%%(sh)
  php artisan migrate --path=app/foo/migrations
%%

**Накатывание новых миграций для пакета:**
%%(sh)
  php artisan migrate --package=vendor/package
%%

.(alert)
**Внимание:** если при применении миграций вы сталкиваетесь с ошибкой "Class not found" ("Класс не найден") - попробуйте выполнить команду %%(sh)composer update%%.

== Откат миграций ==
**Отмена изменений последней миграции:**
%%(sh)
  php artisan migrate:rollback
%%

**Отмена изменений всех миграций:**
%%(sh)
  php artisan migrate:reset
%%

**Откат всех миграций и их повторное применение:**
%%(sh)
  php artisan migrate:refresh

  php artisan migrate:refresh --seed
%%

== Загрузка начальных данных в БД ==
Кроме миграций, описанных выше, Laravel также включает в себя механизм наполнения вашей БД начальными данными (//seeding//) с помощью специальных классов. Все такие классы хранятся в %%(t)app/database/seeds%%. Они могут иметь любое имя, но вам, вероятно, следует придерживаться какой-то логики в их именовании - например, %%UserTableSeeder%% и т.д. По умолчанию для вас уже определён класс %%DatabaseSeeder%%. Из этого класса вы можете вызывать метод %%call()%% для подключения других классов с данными, что позволит вам контролировать порядок их выполнения.

**Примерные классы для загрузки начальных данных:**
%%
  class DatabaseSeeder extends Seeder {

    public function run()
    {
      $this->call('UserTableSeeder');

      $this->command->info('Таблица пользователей загружена данными!');
    }

  }

  class UserTableSeeder extends Seeder {

    public function run()
    {
        DB::table('users')->delete();

        User::create(array('email' => 'foo@bar.com'));
    }

  }
%%

Для добавления данных в БД используйте команду **db:seed** ((artisan Artisan)):
%%(sh)
  php artisan db:seed
%%

Либо вы можете сделать это командой **migrate:refresh**, которая также откатит и заново применит все ваши миграции:
%%(sh)
  php artisan migrate:refresh --seed
%%